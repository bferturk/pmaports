From c5c880537fd9b56e3b1d96e1a71fed4ec80809a7 Mon Sep 17 00:00:00 2001
Message-Id: <c5c880537fd9b56e3b1d96e1a71fed4ec80809a7.1516189772.git.mirq-linux@rere.qmqm.pl>
In-Reply-To: <ca5e9bd6560a188703123bcef6012ce2efa71aaf.1516189772.git.mirq-linux@rere.qmqm.pl>
References: <ca5e9bd6560a188703123bcef6012ce2efa71aaf.1516189772.git.mirq-linux@rere.qmqm.pl>
From: "Kenneth R. Crudup" <kcrudup@lab126.com>
Date: Fri, 18 Nov 2011 22:14:52 -0800
Subject: [PATCH 10/52] mmc: host: sdhci: Allow use of controller's native max
 blocksize
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Currently, any controller supporting a blocksize of 4K or higher
is bumped back down to 512 bytes. This change allows using the
controller's native blocksize on a per-hardware basis.

Signed-off-by: Michał Mirosław <mirq-linux@rere.qmqm.pl>
---
 drivers/mmc/host/Kconfig | 11 +++++++++++
 drivers/mmc/host/sdhci.c |  7 +++++++
 2 files changed, 18 insertions(+)

diff --git a/drivers/mmc/host/Kconfig b/drivers/mmc/host/Kconfig
index 8c15637178ff..ab62371f8eba 100644
--- a/drivers/mmc/host/Kconfig
+++ b/drivers/mmc/host/Kconfig
@@ -78,6 +78,17 @@ config MMC_SDHCI_BIG_ENDIAN_32BIT_BYTE_SWAPPER
 
 	  This is the case for the Nintendo Wii SDHCI.
 
+config MMC_SDHCI_NATIVE_BLOCKSIZE
+	bool "Use Host Controller's actual blocksize"
+	depends on MMC_SDHCI
+	default n
+	help
+	  Normally, the SDHCI host controller will limit the xfer blocksize
+	  to 512 bytes, even if the hardware host controller can do more.
+	  This option uses the maximum blocksize supported by the hardware.
+
+	  I have seen no corruption on a Tegra2, but if unsure, say N.
+
 config MMC_SDHCI_PCI
 	tristate "SDHCI support on PCI bus"
 	depends on MMC_SDHCI && PCI
diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 0d5fcca18c9e..1e7e3ea9c609 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -3691,11 +3691,13 @@ int sdhci_setup_host(struct sdhci_host *host)
 	} else {
 		mmc->max_blk_size = (host->caps & SDHCI_MAX_BLOCK_MASK) >>
 				SDHCI_MAX_BLOCK_SHIFT;
+#ifndef CONFIG_MMC_SDHCI_NATIVE_BLOCKSIZE
 		if (mmc->max_blk_size >= 3) {
 			pr_warn("%s: Invalid maximum block size, assuming 512 bytes\n",
 				mmc_hostname(mmc));
 			mmc->max_blk_size = 0;
 		}
+#endif
 	}
 
 	mmc->max_blk_size = 512 << mmc->max_blk_size;
@@ -3705,6 +3707,11 @@ int sdhci_setup_host(struct sdhci_host *host)
 	 */
 	mmc->max_blk_count = (host->quirks & SDHCI_QUIRK_NO_MULTIBLOCK) ? 1 : 65535;
 
+#ifdef CONFIG_MMC_SDHCI_NATIVE_BLOCKSIZE
+	printk(KERN_INFO "%s: mss %u mrs %u mbs %u mbc %u\n", mmc_hostname(mmc),
+		mmc->max_seg_size, mmc->max_req_size, mmc->max_blk_size,
+		mmc->max_blk_count);
+#endif
 	return 0;
 
 unreg:
-- 
2.14.2

