Source: https://github.com/anbox/anbox/issues/637#issuecomment-372119924

--- a/src/anbox/common/dispatcher.cpp
+++ b/src/anbox/common/dispatcher.cpp
@@ -29,7 +29,7 @@ struct AsioStrandDispatcher : public anbox::common::Dispatcher {
 
  private:
   std::shared_ptr<anbox::Runtime> rt;
-  boost::asio::io_service::strand strand;
+  boost::asio::io_context::strand strand;
 };
 }
 
--- a/src/anbox/runtime.cpp
+++ b/src/anbox/runtime.cpp
@@ -29,7 +29,7 @@ namespace {
 // errors. We should enable calling code to decide whether an exception should
 // be considered
 // fatal or not.
-void exception_safe_run(boost::asio::io_service& service) {
+void exception_safe_run(boost::asio::io_context& service) {
   while (true) {
     try {
       service.run();
@@ -40,7 +40,7 @@ void exception_safe_run(boost::asio::io_service& service) {
     } catch (const std::exception& e) {
       ERROR("%s", e.what());
     } catch (...) {
-      ERROR("Unknown exception caught while executing boost::asio::io_service");
+      ERROR("Unknown exception caught while executing boost::asio::io_context");
     }
   }
 }
@@ -91,6 +91,6 @@ std::function<void(std::function<void()>)> Runtime::to_dispatcher_functional() {
   return [sp](std::function<void()> task) { sp->strand_.post(task); };
 }
 
-boost::asio::io_service& Runtime::service() { return service_; }
+boost::asio::io_context& Runtime::service() { return service_; }
 
 }  // namespace anbox
--- a/src/anbox/runtime.h
+++ b/src/anbox/runtime.h
@@ -46,7 +46,7 @@ class Runtime : public DoNotCopyOrMove,
   // Tears down the runtime, stopping all worker threads.
   ~Runtime() noexcept(true);
 
-  // start executes the underlying io_service on a thread pool with
+  // start executes the underlying io_context on a thread pool with
   // the size configured at creation time.
   void start();
 
@@ -57,9 +57,9 @@ class Runtime : public DoNotCopyOrMove,
   // with components that expect a dispatcher for operation.
   std::function<void(std::function<void()>)> to_dispatcher_functional();
 
-  // service returns the underlying boost::asio::io_service that is executed
+  // service returns the underlying boost::asio::io_context that is executed
   // by the Runtime.
-  boost::asio::io_service& service();
+  boost::asio::io_context& service();
 
  private:
   // Runtime constructs a new instance, firing up pool_size
@@ -67,9 +67,9 @@ class Runtime : public DoNotCopyOrMove,
   Runtime(std::uint32_t pool_size);
 
   std::uint32_t pool_size_;
-  boost::asio::io_service service_;
-  boost::asio::io_service::strand strand_;
-  boost::asio::io_service::work keep_alive_;
+  boost::asio::io_context service_;
+  boost::asio::io_context::strand strand_;
+  boost::asio::io_context::work keep_alive_;
   std::vector<std::thread> workers_;
 };
 
